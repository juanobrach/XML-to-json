{"version":3,"sources":["Utils/index.js","Components/Form/Select.js","Components/Form/index.js","Components/Form/Form.js","Components/FormResults/index.js","Components/FormResults/FormResults.js","App.js","index.js"],"names":["VERSION","MOTOR","XlsxToJson","xlsx","Promise","resolve","reject","response","models","method","url","fetch","then","arrayBuffer","json","catch","ex","makeRequest","file","I","data","Uint8Array","sheets","XLSX","type","Sheets","Object","keys","map","key","model","sheet","sheet_to_json","range","splice","prepareOptionsSelectSchema","options","option","index","value","label","DropdownIndicator","props","react_default","a","createElement","Fragment","chunk_5d200a41_browser_esm","assign","className","Select","_ref","field","form","handleChange","console","log","customStyles","control","base","state","_objectSpread","background","borderRadius","borderColor","boxShadow","&:hover","isFocused","menu","hyphens","marginTop","textAlign","wordWrap","menuList","padding","react_select_browser_esm","closeMenuOnSelect","components","name","styles","onChange","setFieldValue","handleSelectChange","FormComponent","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","version","motor","selected","handleModelChange","bind","assertThisInitialized","handleVersionChange","handleMotorChange","handleYearChange","versions","cars","carModelIndex","forEach","carVariants","variant","column","indexOf","push","getCarVersionsByModel","setState","prevState","Form_objectSpread","motors","motores","getMotoresByVersion","years","getYearsByMotor","year","carData","getAllCarSelectedData","completeForm","_this2","id","formik_esm","initialValues","enableReinitialize","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","_ref2","isSubmitting","Row","Col","lg","component","Component","FormResults","results","App","showResults","car","Container","Components_Form","Components_FormResults","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"wwEAGMA,EAAU,yBACVC,EAAU,kBAUHC,EAAa,SAAAC,GACxB,OAAO,IAAIC,QAAQ,SAASC,EAASC,GACnC,IAAIC,EAAW,GACXC,EAAS,IAkCjB,SAAqBC,EAAQC,GAC3B,OAAO,IAAIN,QAAS,SAASC,EAASC,GACpCK,MAAMD,GAAKE,KAAK,SAASL,GACvB,OAAOA,EAASM,gBACfD,KAAK,SAASE,GACbT,EAAQS,KACTC,MAAM,SAASC,SArClBC,CAAY,EAFF,aAEcL,KAAM,SAAEM,EAAMC,GACpC,IAAIC,EAAO,IAAIC,WAAWH,GAGtBI,EADWC,OAAUH,EAAM,CAAEI,KAAM,UACjBC,OAKtBjB,EAASkB,OAAOC,KAAKL,GAAQM,IAAI,SAAAC,GAC/B,IAAIC,EAAQD,EACRE,EAAQR,QAAWS,cAAcV,EAAOQ,GAAQ,CAAEG,MAAO,IAK7D,OADAF,EAAMG,QAAQ,EAAG,GACV,CACLJ,MAAOA,EACPV,KAAMW,KAGVxB,EAAW,CACTC,OAAS2B,EAA4BT,OAAOC,KAAKL,IACjDF,KAAOZ,GAETH,EAAQE,QAsBd,SAAS4B,EAA4BC,GACnC,OAAOA,EAAQR,IAAK,SAACS,EAAQC,GACzB,MAAO,CAAEC,MAAOD,EAAOE,MAAOH,KAW7B,ymBCxEP,IAAMI,EAAoB,SACxBC,GAEA,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAWN,kBAAZf,OAAAsB,OAAA,CAA+BC,UAAW,iBAAqBP,GAC3DC,EAAAC,EAAAC,cAAA,QAAMI,UAAU,2BAMbC,EAAA,SAAAC,GAIO,IAJLf,EAIKe,EAJLf,QACbgB,EAGkBD,EAHlBC,MACAC,EAEkBF,EAFlBE,KAEAC,GAAkBH,EADlBZ,MACkBY,EAAlBG,cACIC,QAAQC,IAAI,OAAQH,GACpBE,QAAQC,IAAI,SAAUJ,GAC1B,IAAMK,EAAe,CACjBC,QAAS,SAACC,EAAMC,GAAP,OAAAC,EAAA,GACJF,EADI,CAEPG,WAAY,QAEZC,aAAc,EAEdC,YAAa,OAEbC,UAAW,KACXC,UAAW,CAETF,aAAaJ,EAAMO,UAAY,eAGnCC,KAAM,SAAAT,GAAI,OAAAE,EAAA,GACLF,EADK,CAGRI,aAAc,EAEdM,QAAS,OAETC,UAAW,EACXC,UAAW,OAEXC,SAAU,gBAEZC,SAAU,SAAAd,GAAI,OAAAE,EAAA,GACTF,EADS,CAGZe,QAAS,MAaf,OACI/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACIC,mBAAmB,EACnBC,WAAY,CAAEpC,qBACdqC,KAAM1B,EAAM0B,KACZ1C,QAASA,EACT2C,OAAQtB,EACRuB,SAAU,SAAC3C,IAhBQ,SAACA,GACxBgB,EAAK4B,cAAc7B,EAAM0B,KAAMzC,EAAOE,OACpB,YAAfa,EAAM0B,OACLzB,EAAK4B,cAAc,QAAS,MAC5B5B,EAAK4B,cAAc,OAAQ,OAE/B3B,EAAajB,GAUe6C,CAAmB7C,8jBC5ExC8C,cCWX,SAAAA,EAAazC,GAAO,IAAA0C,EAAA,OAAA1D,OAAA2D,EAAA,EAAA3D,CAAA4D,KAAAH,IAChBC,EAAA1D,OAAA6D,EAAA,EAAA7D,CAAA4D,KAAA5D,OAAA8D,EAAA,EAAA9D,CAAAyD,GAAAM,KAAAH,QACK1B,MAAQ,CACT9B,MAAQ,GACR4D,QAAQ,CAAC,CAAClD,MAAM,GAAID,MAAM,KAC1BoD,MAAO,CAAC,CAACnD,MAAM,GAAID,MAAM,KACzBqD,SAAS,CACL9D,MAAO,GACP4D,QAAS,GACTC,MAAO,KAGfP,EAAKS,kBAAsBT,EAAKS,kBAAkBC,KAAvBpE,OAAAqE,EAAA,EAAArE,CAAA0D,IAC3BA,EAAKY,oBAAsBZ,EAAKY,oBAAoBF,KAAzBpE,OAAAqE,EAAA,EAAArE,CAAA0D,IAC3BA,EAAKa,kBAAsBb,EAAKa,kBAAkBH,KAAvBpE,OAAAqE,EAAA,EAAArE,CAAA0D,IAC3BA,EAAKc,iBAAsBd,EAAKc,iBAAiBJ,KAAtBpE,OAAAqE,EAAA,EAAArE,CAAA0D,IAfXA,iFAmBDtD,GACfyB,QAAQC,IAAI,gBAAiB1B,GAC7B,IAAIqE,EH+CyB,SAAEC,EAAMC,GAC3C,IAAIF,EAAW,GAcf,OAbAC,EAAKhF,KAAKkF,QAAS,SAACC,EAAajE,GACzBA,IAAW+D,GACbE,EAAYnF,KAAKkF,QAAS,SAACE,GACzB9E,OAAOC,KAAK6E,GAASF,QAAS,SAAEG,GAC1BA,IAAWzG,GACRmG,EAASO,QAASF,EAAQC,IAAY,GACzCN,EAASQ,KAAMH,EAAQC,UAO9BtE,EAA2BgE,GG9DbS,CAAwBtB,KAAK5C,MAAM0D,KAAMtE,EAAMS,OAC9D+C,KAAKuB,SAAU,SAAAC,GAAS,MAAI,CACxBpB,QAASS,EACTP,SAASmB,EAAA,GACFD,EAAUlB,SADT,CAEJ9D,MAAOA,mDAQE4D,GACjBnC,QAAQC,IAAI,iBAAkBkC,GAC9BJ,KAAKuB,SAAS,CAAClB,MAAM,OACrB,IAAIqB,EHuDwB,SAAEZ,EAAMtE,EAAQ4D,GAClD,IAAIuB,EAAU,GAiBd,OAhBA1D,QAAQC,IAAI,SAAU1B,GACtByB,QAAQC,IAAI,WAAYkC,GACxBU,EAAKhF,KAAKkF,QAAS,SAACC,EAAajE,GACzBA,IAAWR,GACbyE,EAAYnF,KAAKkF,QAAS,SAACE,GACzB9E,OAAOC,KAAK6E,GAASF,QAAS,SAAEG,GAC9BlD,QAAQC,IAAI,UAAWiD,GACnBA,IAAWxG,GAASuG,EAAQxG,KAAa0F,EAAQlD,OAC9CyE,EAAQP,QAASF,EAAQC,IAAY,GACxCQ,EAAQN,KAAMH,EAAQC,UAO7BtE,EAA2B8E,GGzEfC,CAAsB5B,KAAK5C,MAAM0D,KAAMd,KAAK1B,MAAMgC,SAAS9D,MAAMS,MAAOmD,GACrFJ,KAAKuB,SAAU,SAAAC,GAAS,MAAK,CACzBnB,MAAOqB,EACPpB,SAASmB,EAAA,GACFD,EAAUlB,SADT,CAEJF,QAASA,EACTC,MAAO,kDAOAA,GACf,IAAIwB,EHmEoB,SAAEf,EAAMtE,EAAQ4D,EAAUC,GACxD,IAAIwB,EAAQ,GAcZ,OAbAf,EAAKhF,KAAKkF,QAAS,SAACC,EAAajE,GACzBA,IAAWR,GACbyE,EAAYnF,KAAKkF,QAAS,SAACE,GACzB9E,OAAOC,KAAK6E,GAASF,QAAS,SAAEG,GAlIzB,iBAmIDA,GAAmBD,EAAQxG,KAAa0F,EAAQlD,OAASgE,EAAQvG,KAAW0F,EAAMnD,OAC/E2E,EAAMT,QAASF,EAAQC,IAAY,GACtCU,EAAMR,KAAMH,EAAQC,UAO3BtE,EAA2BgF,GGlFhBC,CAAkB9B,KAAK5C,MAAM0D,KAAOd,KAAK1B,MAAMgC,SAAS9D,MAAMS,MAAS+C,KAAK1B,MAAMgC,SAASF,QAAUC,GACjHL,KAAKuB,SAAU,SAAAC,GAAS,MAAK,CACzBO,KAAMF,EACNvB,SAASmB,EAAA,GACFD,EAAUlB,SADT,CAEJD,MAAOA,gDAKD0B,GACd,IAAIC,EH2E0B,SAAElB,EAAMtE,EAAQ4D,EAAUC,EAAO0B,GACrE,IAAIC,EAAU,GAiBd,OAhBAlB,EAAKhF,KAAKkF,QAAS,SAACC,EAAajE,GACzBA,IAAWR,GACbyE,EAAYnF,KAAKkF,QAAS,SAACE,GACzB9E,OAAOC,KAAK6E,GAASF,QAAS,SAAEG,GACzBD,EAAQxG,KAAa0F,EAAQlD,OAC7BgE,EAAQvG,KAAW0F,EAAMnD,OACzBgE,EAxJA,kBAwJkBa,EAAK7E,OAErB8E,EAAQZ,QAASF,EAAQC,IAAY,GACxCa,EAAQX,KAAM,CAAEF,OAAQA,EAASlE,MAAOiE,EAAQC,WAOvDa,EG7FaC,CAAwBjC,KAAK5C,MAAM0D,KAAOd,KAAK1B,MAAMgC,SAAS9D,MAAMS,MAAS+C,KAAK1B,MAAMgC,SAASF,QAAUJ,KAAK1B,MAAMgC,SAASD,MAAO0B,GACpJ/B,KAAKuB,SAAU,SAAAC,GAAS,MAAK,CACzBlB,SAASmB,EAAA,GACFD,EAAUlB,SADT,CAEJyB,KAAMA,OAId/B,KAAK5C,MAAM8E,aAAaF,oCAIpB,IAAAG,EAAAnC,KACJ,OACI3C,EAAAC,EAAAC,cAAA,OAAK6E,GAAG,kBACJ/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACAC,cAAe,CAAE9F,MAAO,GAAI4D,QAAS,GAAKC,MAAO,GAAI0B,KAAM,IAC3DQ,oBAAoB,EACpBC,SAAU,SAACC,EAAD5E,GAA+B,IAApB6E,EAAoB7E,EAApB6E,cAEjBC,WAAW,WACXC,MAAMC,KAAKC,UAAUL,EAAQ,KAAM,IACnCC,GAAc,IACX,OAGN,SAAAK,KAAGC,aAAHD,EAAiBN,OAAjB,OAEGpF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,KACQhF,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,KAEI5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAKC,GAAI,GAEL9F,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAb,UACAN,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAO7C,KAAK,QAASxB,aAAcmE,EAAK5B,kBAAmB6C,UAAWxF,EAAQd,QAASqF,EAAK/E,MAAMlC,SAClGmC,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAc7C,KAAK,QAAQ4D,UAAU,UAI7C/F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAKC,GAAI,GAEL9F,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAb,aACAN,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAO7C,KAAK,UAAWxB,aAAcmE,EAAKzB,oBAAqB0C,UAAWxF,EAAQd,QAASqF,EAAK7D,MAAM8B,UACtG/C,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAc7C,KAAK,UAAU4D,UAAU,UAI/C/F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAKC,GAAI,GAEL9F,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAb,SACAN,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAO7C,KAAK,QAASxB,aAAcmE,EAAKxB,kBAAoByC,UAAWxF,EAAQd,QAASqF,EAAK7D,MAAM+B,QACnGhD,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAc7C,KAAK,QAAQ4D,UAAU,UAI7C/F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAKC,GAAI,GAEL9F,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAb,OACAN,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAO7C,KAAK,OAAO4D,UAAWxF,EAAQd,QAASqF,EAAK7D,MAAMyD,KAAM/D,aAAcmE,EAAKvB,mBACnFvD,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAc7C,KAAK,OAAO4D,UAAU,sBA/HhDC,aCTbC,ECEK,SAAElG,GAGlB,OACIC,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAKb,GAAG,gBAEAhF,EAAMmG,QAAQjH,IAAK,SAAER,GACjB,OACIuB,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAKC,GAAG,KACJ9F,EAAAC,EAAAC,cAAA,MAAII,UAAU,SAAS7B,EAAKqF,QAC5B9D,EAAAC,EAAAC,cAAA,KAAGI,UAAU,gBAAgB7B,EAAKmB,qBCmE/CuG,cAlDb,SAAAA,EAAYpG,GAAO,IAAA0C,EAAA,OAAA1D,OAAA2D,EAAA,EAAA3D,CAAA4D,KAAAwD,IACjB1D,EAAA1D,OAAA6D,EAAA,EAAA7D,CAAA4D,KAAA5D,OAAA8D,EAAA,EAAA9D,CAAAoH,GAAArD,KAAAH,KAAM5C,KAoBR8E,aAAe,SAAEqB,GACfzD,EAAKyB,SAAS,CACZkC,aAAY,EACZF,QAASA,KAtBXzD,EAAKxB,MAAQ,CACX9C,MAAM,EACNsF,KAAM,KACN4C,IAAK,GACLH,QAAS,GACTE,aAAc,GAGhB3D,EAAKoC,aAAepC,EAAKoC,aAAa1B,KAAlBpE,OAAAqE,EAAA,EAAArE,CAAA0D,IAVHA,mFAaC,IAAAqC,EAAAnC,KAElBpF,IAAaU,KAAM,SAAAwF,GACjBqB,EAAKZ,SAAS,CAAET,KAAMA,uCAcxB,OADUd,KAAK1B,MAAMwC,KAAOd,KAAK1B,MAAMwC,KAAO,IAI1CzD,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACoG,EAAA,EAAD,KACEtG,EAAAC,EAAAC,cAAA,MAAII,UAAU,cAAd,qDACAN,EAAAC,EAAAC,cAACqG,EAAD,CAAM1I,OAAQ8E,KAAK1B,MAAMwC,KAAK5F,OAAQ4F,KAAMd,KAAK1B,MAAMwC,KAAMoB,aAAclC,KAAKkC,eAE9ElC,KAAK1B,MAAMmF,YAAcpG,EAAAC,EAAAC,cAACsG,EAAD,CAAcN,QAASvD,KAAK1B,MAAMiF,UAAa,KAO9ElG,EAAAC,EAAAC,cAAA,+BA9CU8F,aCtBZS,iBAAcC,SAASC,eAAe,SAC5CC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAASL","file":"static/js/main.878ab996.chunk.js","sourcesContent":["import * as XLSX from \"xlsx\";\r\n\r\n\r\nconst VERSION = \"Marca/Modelo/VersÃ£o\";\r\nconst MOTOR   = \"Modelo de Motor\";\r\nconst YEAR     = \"Ano / Modelo\";\r\n\r\n/*\r\n *  Get XLSX Workbook from public url of the server\r\n *  Every Sheet in the workbook is a model.We need to  remove \"Historico\" sheet is\r\n *  not a model.\r\n *  @return json\r\n *\r\n */\r\nexport const XlsxToJson = xlsx => {\r\n  return new Promise(function(resolve, reject) {\r\n    let response = [];\r\n    let models = [];\r\n    let url = \"cars.xlsx\";\r\n    \r\n    makeRequest(\"GET\", url).then( ( file, I ) =>{\r\n      var data = new Uint8Array(file);\r\n      \r\n      var workbook = XLSX.read(data, { type: \"array\" });\r\n      let sheets = workbook.Sheets;\r\n      /**\r\n       *  Iterarion 1 : Iterate every sheet. Each sheet is a car model wich\r\n       *  contain on the first row the header and then the values\r\n       */\r\n      models = Object.keys(sheets).map(key => {\r\n        let model = key;\r\n        let sheet = XLSX.utils.sheet_to_json(sheets[model], { range: 1 });\r\n    \r\n        // TODO: Actual the XLSX has on every last row of every sheet junk data. Remove from code or\r\n        // remove from the XLSX\r\n        sheet.splice(-1, 1);\r\n        return {\r\n          model: model,\r\n          data: sheet\r\n        };\r\n      });\r\n      response = {\r\n        models : prepareOptionsSelectSchema( Object.keys(sheets)),\r\n        data : models\r\n      }\r\n      resolve(response)\r\n      return\r\n    })\r\n  })\r\n};\r\n\r\nfunction makeRequest(method, url) {\r\n  return new Promise( function(resolve, reject) {\r\n    fetch(url).then(function(response) {\r\n      return response.arrayBuffer();\r\n    }).then(function(json) {\r\n        resolve(json)\r\n    }).catch(function(ex) {\r\n    })\r\n  })\r\n}\r\n\r\n\r\n/**\r\n *  We are using Formik as our Form statefull library\r\n *  Need to prepare a schema for select fields like { value: String, label: String }\r\n */\r\nfunction prepareOptionsSelectSchema( options ){\r\n  return options.map( (option, index) => {\r\n      return { value: index, label: option }\r\n  })\r\n}\r\n\r\n\r\n/**\r\n *  Step 1\r\n *  Iterate over each versions available for this car model\r\n *  \r\n *  model > data > modelVariants[] \r\n  */\r\nexport const getCarVersionsByModel = ( cars, carModelIndex ) =>{\r\n  let versions = [];\r\n  cars.data.forEach( (carVariants, index ) => {\r\n      if( index ===  carModelIndex ){\r\n        carVariants.data.forEach( (variant) =>{\r\n          Object.keys(variant).forEach( ( column ) => {\r\n            if( column === VERSION ){\r\n              if(  versions.indexOf( variant[column] ) < 0 ){\r\n                versions.push( variant[column] );\r\n              }\r\n            }\r\n          })\r\n        })\r\n      }\r\n  });\r\n  return prepareOptionsSelectSchema(versions);\r\n}\r\n\r\n/**\r\n *  Step 2 ( match [model, version])\r\n *  Iterate over each versions available for this car model\r\n *  TODO: validate motors of the same preselected version\r\n *  model > data > modelVariants[] \r\n  */\r\n export const getMotoresByVersion = ( cars, model,  version ) =>{\r\n  let motores = [];\r\n  console.log('model:', model)\r\n  console.log('version:', version)\r\n  cars.data.forEach( (carVariants, index ) => {\r\n      if( index ===  model ){\r\n        carVariants.data.forEach( (variant) =>{\r\n          Object.keys(variant).forEach( ( column ) => {\r\n            console.log('column:', column)\r\n            if( column === MOTOR && variant[VERSION] === version.label ){\r\n              if(  motores.indexOf( variant[column] ) < 0 ){\r\n                motores.push( variant[column] );\r\n              }\r\n            }\r\n          })\r\n        })\r\n      }\r\n  });\r\n  return prepareOptionsSelectSchema(motores);\r\n}\r\n\r\n/**\r\n *  Step 3 ( match [model, version, motor ])\r\n *  Iterate over each versions available for this car model\r\n *  model > data > modelVariants[] \r\n  */\r\n export const getYearsByMotor = ( cars, model,  version , motor ) =>{\r\n  let years = [];\r\n  cars.data.forEach( (carVariants, index ) => {\r\n      if( index ===  model ){\r\n        carVariants.data.forEach( (variant) =>{\r\n          Object.keys(variant).forEach( ( column ) => {\r\n            if( column === YEAR && variant[VERSION] === version.label && variant[MOTOR] === motor.label ){\r\n              if(  years.indexOf( variant[column] ) < 0 ){\r\n                years.push( variant[column] );\r\n              }\r\n            }\r\n          })\r\n        })\r\n      }\r\n  });\r\n  return prepareOptionsSelectSchema(years);\r\n}\r\n\r\n\r\nexport const getAllCarSelectedData  = ( cars, model,  version , motor, year ) =>{\r\n  let carData = [];\r\n  cars.data.forEach( (carVariants, index ) => {\r\n      if( index ===  model ){\r\n        carVariants.data.forEach( (variant) =>{\r\n          Object.keys(variant).forEach( ( column ) => {\r\n            if(  variant[VERSION] === version.label \r\n              && variant[MOTOR] === motor.label \r\n              && variant[YEAR] === year.label\r\n              ){\r\n              if(  carData.indexOf( variant[column] ) < 0 ){\r\n                carData.push( { column: column,  value: variant[column] } );\r\n              }\r\n            }\r\n          })\r\n        })\r\n      }\r\n  });\r\n  return carData;\r\n}","import React from 'react';\r\nimport Select, { components } from 'react-select';\r\n\r\n\r\n/*\r\n* DropdDownIndicator\r\n* Render custom select dropdown for each field\r\n*/\r\nconst DropdownIndicator = (\r\n  props\r\n) => {\r\n  return (\r\n    <React.Fragment>\r\n        <components.DropdownIndicator  className={'select-custom'} {...props}>\r\n            <span className=\"select-custom-arrow\"></span>\r\n        </components.DropdownIndicator>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ({options,\r\n    field,\r\n    form,\r\n    value,\r\n    handleChange}) => {\r\n        console.log('form', form);\r\n        console.log('field:', field)\r\n    const customStyles = {\r\n        control: (base, state) => ({\r\n          ...base,\r\n          background: \"#ffff\",\r\n          // match with the menu\r\n          borderRadius: 0,\r\n          // Overwrittes the different states of border\r\n          borderColor: 'gray',\r\n          // Removes weird border around container\r\n          boxShadow: null,\r\n          \"&:hover\": {\r\n            // Overwrittes the different states of border\r\n            borderColor: state.isFocused ? \"inherit\" : \"inherit\"\r\n          }\r\n        }),\r\n        menu: base => ({\r\n          ...base,\r\n          // override border radius to match the box\r\n          borderRadius: 0,\r\n          // beautify the word cut by adding a dash see https://caniuse.com/#search=hyphens for the compatibility\r\n          hyphens: \"auto\",\r\n          // kill the gap\r\n          marginTop: 0,\r\n          textAlign: \"left\",\r\n          // prevent menu to scroll y\r\n          wordWrap: \"break-word\"\r\n        }),\r\n        menuList: base => ({\r\n          ...base,\r\n          // kill the white space on first and last option\r\n          padding: 0\r\n        })\r\n    }\r\n\r\n    const handleSelectChange = (option) =>{\r\n        form.setFieldValue(field.name, option.value)\r\n        if(field.name === 'version'){\r\n            form.setFieldValue('motor', null);          \r\n            form.setFieldValue('year', null);          \r\n        }\r\n        handleChange(option);\r\n    }\r\n    \r\n    return(\r\n        <Select\r\n            closeMenuOnSelect={true}\r\n            components={{ DropdownIndicator }}\r\n            name={field.name}\r\n            options={options}\r\n            styles={customStyles}\r\n            onChange={(option) => { handleSelectChange(option) } }\r\n        />\r\n)};","import FormComponent from './Form';\r\nexport default FormComponent;","import React, { Component } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport  { Row, Col } from 'react-bootstrap';\r\nimport Select from './Select';\r\nimport { getCarVersionsByModel, getMotoresByVersion, getYearsByMotor, getAllCarSelectedData } from \"./../../Utils\";\r\n\r\n/**\r\n *  Schema of form [ model, version, motor, year ]\r\n *  Form submits on last field change\r\n */\r\nclass FormComponent extends Component {\r\n\r\n    constructor( props ){\r\n        super()\r\n        this.state = {\r\n            model : '',\r\n            version:[{label:'', value:''}],\r\n            motor: [{label:'', value:''}],\r\n            selected:{\r\n                model: '',\r\n                version: '',\r\n                motor: ''\r\n            }\r\n        }\r\n        this.handleModelChange   = this.handleModelChange.bind(this)\r\n        this.handleVersionChange = this.handleVersionChange.bind(this)\r\n        this.handleMotorChange   = this.handleMotorChange.bind(this)\r\n        this.handleYearChange    = this.handleYearChange.bind(this)\r\n\r\n    }\r\n\r\n    handleModelChange( model ){\r\n        console.log(\"handle change\", model )\r\n        let versions = getCarVersionsByModel(  this.props.cars, model.value  );\r\n        this.setState( prevState =>({\r\n            version: versions,\r\n            selected: {\r\n                ...prevState.selected,\r\n                model: model\r\n            } \r\n        }))\r\n    }\r\n\r\n    /**\r\n     *  Match Car > preselected Model and selected version\r\n     */\r\n    handleVersionChange( version ){\r\n        console.log(\"handle version\", version )\r\n        this.setState({motor:null});\r\n        let motors = getMotoresByVersion(  this.props.cars, this.state.selected.model.value, version  );\r\n        this.setState( prevState => ({\r\n            motor: motors,\r\n            selected: {\r\n                ...prevState.selected,\r\n                version: version,\r\n                motor: ''\r\n            } \r\n        }))\r\n\r\n        \r\n    }\r\n\r\n    handleMotorChange( motor ){\r\n        let years = getYearsByMotor(  this.props.cars,  this.state.selected.model.value ,  this.state.selected.version,  motor  );\r\n        this.setState( prevState => ({\r\n            year: years,\r\n            selected: {\r\n                ...prevState.selected,\r\n                motor: motor\r\n            }  \r\n        }))\r\n    }\r\n\r\n    handleYearChange( year ){\r\n        let carData = getAllCarSelectedData(  this.props.cars,  this.state.selected.model.value ,  this.state.selected.version,  this.state.selected.motor, year  );\r\n        this.setState( prevState => ({\r\n            selected: {\r\n                ...prevState.selected,\r\n                year: year\r\n            }  \r\n        }))\r\n\r\n        this.props.completeForm(carData)\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"form-component\">\r\n                <Formik\r\n                initialValues={{ model: '', version: '',  motor: '', year: '' }}\r\n                enableReinitialize={true} \r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    // TODO: Find all car information and display it with a FormResultsComponent\r\n                    setTimeout(() => {\r\n                    alert(JSON.stringify(values, null, 2));\r\n                    setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n                >\r\n                {({ isSubmitting, values }) => (\r\n                       \r\n                    <Form>\r\n                            <Row>\r\n                           \r\n                                <Col lg={3}>\r\n                                    { /* Version Field  */}\r\n                                    <React.Fragment>\r\n                                        <p className=\"field-label\">MODELO</p>\r\n                                        <Field name=\"model\"  handleChange={this.handleModelChange} component={Select} options={this.props.models} />\r\n                                        <ErrorMessage name=\"model\" component=\"div\" />\r\n                                    </React.Fragment>\r\n                                </Col>\r\n\r\n                                <Col lg={3}>\r\n                                    { /* Model Field  */}\r\n                                    <React.Fragment>\r\n                                        <p className=\"field-label\">VERSÃO</p>\r\n                                        <Field name=\"version\"  handleChange={this.handleVersionChange} component={Select} options={this.state.version} />\r\n                                        <ErrorMessage name=\"version\" component=\"div\" />\r\n                                    </React.Fragment>\r\n                                </Col>\r\n\r\n                                <Col lg={3}>\r\n                                    { /* Motor Field  */}\r\n                                    <React.Fragment>\r\n                                        <p className=\"field-label\">MOTOR</p>\r\n                                        <Field name=\"motor\"  handleChange={this.handleMotorChange}  component={Select} options={this.state.motor} />\r\n                                        <ErrorMessage name=\"motor\" component=\"div\" />\r\n                                    </React.Fragment>\r\n                                </Col>\r\n\r\n                                <Col lg={3}>\r\n                                    { /* Motor Field  */}\r\n                                    <React.Fragment>\r\n                                        <p className=\"field-label\">ANO</p>\r\n                                        <Field name=\"year\" component={Select} options={this.state.year} handleChange={this.handleYearChange}  />\r\n                                        <ErrorMessage name=\"year\" component=\"div\" />\r\n                                    </React.Fragment>\r\n                                </Col>\r\n                              \r\n                            </Row>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FormComponent","import FormResults from './FormResults';\r\nexport default FormResults;","import React from 'react';\r\nimport  { Row, Col } from 'react-bootstrap';\r\n\r\nconst FormResults = ( props )=>{\r\n\r\n\r\n    return(\r\n        <Row id=\"form-results\">\r\n            {\r\n                props.results.map( ( data ) => {\r\n                    return(\r\n                        <Col lg=\"2\">\r\n                            <h4 className=\"title\">{data.column}</h4>\r\n                            <p className=\"text-content\">{data.value}</p>\r\n                        </Col>\r\n                    )\r\n                } )\r\n            }\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\nexport default FormResults;","import React, { Component } from \"react\";\r\nimport { XlsxToJson } from \"./Utils\";\r\nimport  Form from \"./Components/Form\";\r\nimport  FormResults from \"./Components/FormResults\";\r\n\r\nimport  { Container } from 'react-bootstrap';\r\n\r\n\r\n/**\r\n *  Manage cars data from xslx file converted to JSON\r\n *  XLSX file wil be located at specific /public folder\r\n *  for UPDATES information it's necesary to change the file inside it.\r\n *  ex: https://uploads.codesandbox.io/uploads/user/df6ff7f5-1e82-4373-8f4a-9930336ba434/Fwi3-ficha-tecnica-equinox.xls\r\n *\r\n *  Project components\r\n *  App\r\n *   FormComponent\r\n *   FormResults\r\n *\r\n *  States\r\n *    Intial state of aplication will be a json file with all Brands availables\r\n *    to populate the first dropdown menu.\r\n *\r\n *  Utils\r\n *    Utils folder contain scripts to controll the process of parse the information\r\n *    on a schema.\r\n *  Form\r\n *    Schema of form would be  [ model, version, motor, year ]\r\n */\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      json: false,\r\n      cars: null,\r\n      car: {},\r\n      results: [],\r\n      showResults : false\r\n    };\r\n\r\n    this.completeForm = this.completeForm.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO: Get json from XML (utils)\r\n    XlsxToJson().then( cars => {\r\n      this.setState({ cars: cars })\r\n    });\r\n  }\r\n\r\n  // Show Results\r\n  completeForm = ( results ) =>{\r\n    this.setState({\r\n      showResults:true,\r\n      results: results\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let car = this.state.cars ? this.state.cars : \"\";\r\n    if(car){\r\n\r\n      return(\r\n        <React.Fragment>\r\n          <Container>\r\n            <h2 className=\"form-title\">Veja as informaÃ§Ãµes sobre o seu veÃ­culo:</h2>\r\n            <Form models={this.state.cars.models} cars={this.state.cars} completeForm={this.completeForm} />\r\n            {\r\n              this.state.showResults ? <FormResults  results={this.state.results}/> : ''         \r\n            }\r\n          </Container>\r\n        </React.Fragment>\r\n      )\r\n    }else{\r\n      return (\r\n        <p>Loading ...</p>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import \"core-js\";\r\nimport 'react-app-polyfill/ie11';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./styles.scss\";\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}