{"version":3,"sources":["Utils/index.js","Components/Form/index.js","Components/Form/Form.js","App.js","index.js"],"names":["XlsxToJson","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","xlsx","response","models","req","data","workbook","sheets","wrap","_context","prev","next","console","log","makeRequest","sent","Uint8Array","XLSX","type","Sheets","keys","map","key","model","sheet","sheet_to_json","range","splice","abrupt","stop","_x","apply","this","arguments","method","url","Promise","resolve","reject","xhr","XMLHttpRequest","responseType","open","onload","status","statusText","onerror","send","Form","react_default","createElement","props","value","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","json","cars","car","_this2","then","setState","Fragment","brand","Components_Form","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"0TAUaA,SAAU,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAV,EAAAC,EAAAU,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACxBC,QAAQC,IAAI,UACRX,EAAW,GACXC,EAAS,GACH,YAJcM,EAAAE,KAAA,EAMRG,EAAY,MAFlB,aAJc,cAMpBV,EANoBK,EAAAM,KAQpBV,EAAO,IAAIW,WAAWZ,GAEtBE,EAAWW,OAAUZ,EAAM,CAAEa,KAAM,UACnCX,EAASD,EAASa,OAKtBhB,EAASR,OAAOyB,KAAKb,GAAQc,IAAI,SAAAC,GAC/B,IAAIC,EAAQD,EACRE,EAAQP,QAAWQ,cAAclB,EAAOgB,GAAQ,CAAEG,MAAO,IAK7D,OADAF,EAAMG,QAAQ,EAAG,GACV,CACLJ,MAAOA,EACPlB,KAAMmB,KAGVtB,EAAW,CACTC,OAASR,OAAOyB,KAAKb,GACrBF,KAAOF,GA9BeM,EAAAmB,OAAA,SAgCjB1B,GAhCiB,yBAAAO,EAAAoB,SAAA7B,MAAH,gBAAA8B,GAAA,OAAApC,EAAAqC,MAAAC,KAAAC,YAAA,IAmCvB,SAASnB,EAAYoB,EAAQC,GAC3B,OAAO,IAAIC,QAAQ,SAASC,EAASC,GACnC,IAAIC,EAAM,IAAIC,eACdD,EAAIE,aAAe,cACnBF,EAAIG,KAAKR,EAAQC,GACjBI,EAAII,OAAS,WACPX,KAAKY,QAAU,KAAOZ,KAAKY,OAAS,IACtCP,EAAQE,EAAIrC,UAEZoC,EAAO,CACLM,OAAQZ,KAAKY,OACbC,WAAYN,EAAIM,cAItBN,EAAIO,QAAU,WACZR,EAAO,CACLM,OAAQZ,KAAKY,OACbC,WAAYN,EAAIM,cAGpBN,EAAIQ,aCjEOC,mLCKP,OACIC,EAAAnD,EAAAoD,cAAA,YACID,EAAAnD,EAAAoD,cAAA,cAEKlB,KAAKmB,MAAMhD,OAAOkB,IAAK,SAAEE,EAAOD,GAC9B,OAAO2B,EAAAnD,EAAAoD,cAAA,UAAQ5B,IAAKA,EAAM8B,MAAO9B,GAA1B,IAAiCC,EAAjC,gBAPX8B,aCwDJC,cAlCb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAA5D,OAAA6D,EAAA,EAAA7D,CAAAqC,KAAAsB,IACjBC,EAAA5D,OAAA8D,EAAA,EAAA9D,CAAAqC,KAAArC,OAAA+D,EAAA,EAAA/D,CAAA2D,GAAAK,KAAA3B,KAAMmB,KACDS,MAAQ,CACXC,MAAM,EACNC,KAAM,KACNC,IAAK,IALUR,mFASC,IAAAS,EAAAhC,KAEJvC,IAAawE,KAAM,SAAAH,GAC/BlD,QAAQC,IAAKiD,GACbE,EAAKE,SAAS,CAAEJ,KAAMA,uCAKxB,IAAIC,EAAM/B,KAAK4B,MAAME,KAAO9B,KAAK4B,MAAME,KAAO,GAC9C,OAAGC,EAGCd,EAAAnD,EAAAoD,cAACD,EAAAnD,EAAMqE,SAAP,KACElB,EAAAnD,EAAAoD,cAAA,oBAAYa,EAAIK,OADlB,IAEEnB,EAAAnD,EAAAoD,cAACmB,EAAD,CAAMlE,OAAQ6B,KAAK4B,MAAME,KAAK3D,UAKhC8C,EAAAnD,EAAAoD,cAAA,+BA9BUG,aCrBZiB,SAAcC,SAASC,eAAe,SAC5CC,IAASC,OAAOzB,EAAAnD,EAAAoD,cAACyB,EAAD,MAASL","file":"static/js/main.cb94efbc.chunk.js","sourcesContent":["import * as XLSX from \"xlsx\";\r\nimport { string } from \"prop-types\";\r\nimport axios from \"axios\";\r\n/*\r\n *  Get XLSX Workbook from public url of the server\r\n *  Every Sheet in the workbook is a model.We need to  remove \"Historico\" sheet is\r\n *  not a model.\r\n *  @return json\r\n *\r\n */\r\nexport const XlsxToJson = async xlsx => {\r\n  console.log(\"called\");\r\n  let response = [];\r\n  let models = [];\r\n  let url = \"cars.xlsx\";\r\n\r\n  let req = await makeRequest(\"GET\", url);\r\n  \r\n  var data = new Uint8Array(req);\r\n  \r\n  var workbook = XLSX.read(data, { type: \"array\" });\r\n  let sheets = workbook.Sheets;\r\n  /**\r\n   *  Iterarion 1 : Iterate every sheet. Each sheet is a car model wich\r\n   *  contain on the first row the header and then the values\r\n   */\r\n  models = Object.keys(sheets).map(key => {\r\n    let model = key;\r\n    let sheet = XLSX.utils.sheet_to_json(sheets[model], { range: 1 });\r\n\r\n    // TODO: Actual the XLSX has on every last row of every sheet junk data. Remove from code or\r\n    // remove from the XLSX\r\n    sheet.splice(-1, 1);\r\n    return {\r\n      model: model,\r\n      data: sheet\r\n    };\r\n  });\r\n  response = {\r\n    models : Object.keys(sheets),\r\n    data : models\r\n  }\r\n  return response;\r\n};\r\n\r\nfunction makeRequest(method, url) {\r\n  return new Promise(function(resolve, reject) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType = \"arraybuffer\";\r\n    xhr.open(method, url);\r\n    xhr.onload = function() {\r\n      if (this.status >= 200 && this.status < 300) {\r\n        resolve(xhr.response);\r\n      } else {\r\n        reject({\r\n          status: this.status,\r\n          statusText: xhr.statusText\r\n        });\r\n      }\r\n    };\r\n    xhr.onerror = function() {\r\n      reject({\r\n        status: this.status,\r\n        statusText: xhr.statusText\r\n      });\r\n    };\r\n    xhr.send();\r\n  });\r\n}\r\n","import Form from './Form';\r\nexport default Form;","import React, { Component } from \"react\";\r\n\r\n\r\n\r\nclass Form extends Component {\r\n    render(){\r\n        return(\r\n            <form>\r\n                <select>\r\n                    {\r\n                     this.props.models.map( ( model, key)=>{\r\n                       return <option key={key}  value={key}> {model} </option>\r\n                     })\r\n                    }\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Form","import React, { Component } from \"react\";\r\nimport { XlsxToJson } from \"./Utils\";\r\nimport  Form from \"./Components/Form\";\r\n\r\n/**\r\n *  Manage cars data from xslx file converted to JSON\r\n *  XLSX file wil be located at specific /public folder\r\n *  for UPDATES information it's necesary to change the file inside it.\r\n *  ex: https://uploads.codesandbox.io/uploads/user/df6ff7f5-1e82-4373-8f4a-9930336ba434/Fwi3-ficha-tecnica-equinox.xls\r\n *\r\n *  Project components\r\n *  App\r\n *   FormComponent\r\n *   FormResultsComponent\r\n *\r\n *  States\r\n *    Intial state of aplication will be a json file with all Brands availables\r\n *    to populate the first dropdown menu.\r\n *\r\n *  Utils\r\n *    Utils folder contain scripts to controll the process of parse the information\r\n *    on a schema.\r\n *  Form\r\n *    Schema of form would be  [ model, version, year ]\r\n */\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      json: false,\r\n      cars: null,\r\n      car: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO: Get json from XML (utils)\r\n    let getCars = XlsxToJson().then( cars => {\r\n      console.log( cars );\r\n      this.setState({ cars: cars })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let car = this.state.cars ? this.state.cars : \"\";\r\n    if(car){\r\n\r\n      return(\r\n        <React.Fragment>\r\n          <h1>GM app {car.brand}</h1>;\r\n          <Form models={this.state.cars.models} />\r\n        </React.Fragment>\r\n      )\r\n    }else{\r\n      return (\r\n        <p>Loading ...</p>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles.css\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}