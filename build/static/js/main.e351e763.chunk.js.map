{"version":3,"sources":["Utils/index.js","Components/Form/index.js","Components/Form/Form.js","App.js","index.js"],"names":["XlsxToJson","xlsx","Promise","resolve","reject","console","log","response","models","result","method","url","fetch","then","arrayBuffer","json","catch","ex","makeRequest","file","I","data","Uint8Array","sheets","XLSX","type","Sheets","Object","keys","map","key","model","sheet","sheet_to_json","range","splice","Form","react_default","a","createElement","this","props","value","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cars","car","_this2","setState","Fragment","brand","Components_Form","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"uwEASaA,EAAa,SAAAC,GACxB,OAAO,IAAIC,QAAQ,SAASC,EAASC,GACnCC,QAAQC,IAAI,UACZ,IAAIC,EAAW,GACXC,EAAS,GAGTC,EAiCR,SAAqBC,EAAQC,GAE3B,OADAN,QAAQC,IAAI,kBACL,IAAIJ,QAAS,SAASC,EAASC,GACpCQ,MAAMD,GAAKE,KAAK,SAASN,GACvB,OAAOA,EAASO,gBACfD,KAAK,SAASE,GACbV,QAAQC,IAAI,cAAeS,GAC3BZ,EAAQY,KACTC,MAAM,SAASC,GACdZ,QAAQC,IAAI,iBAAkBW,OA1CrBC,CAAY,EAFf,aAE2BL,KAAM,SAAEM,EAAMC,GACjDf,QAAQC,IAAI,mBAAoBa,GAChC,IAAIE,EAAO,IAAIC,WAAWH,GAGtBI,EADWC,OAAUH,EAAM,CAAEI,KAAM,UACjBC,OAKtBlB,EAASmB,OAAOC,KAAKL,GAAQM,IAAI,SAAAC,GAC/B,IAAIC,EAAQD,EACRE,EAAQR,QAAWS,cAAcV,EAAOQ,GAAQ,CAAEG,MAAO,IAK7D,OADAF,EAAMG,QAAQ,EAAG,GACV,CACLJ,MAAOA,EACPV,KAAMW,KAGVzB,EAAW,CACTC,OAASmB,OAAOC,KAAKL,GACrBF,KAAOb,GAETL,EAAQI,KAGVF,QAAQC,IAAI,SAAUG,UC5CX2B,mLCKP,OACIC,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,cAEKC,KAAKC,MAAMjC,OAAOqB,IAAK,SAAEE,EAAOD,GAC9B,OAAOO,EAAAC,EAAAC,cAAA,UAAQT,IAAKA,EAAMY,MAAOZ,GAA1B,IAAiCC,EAAjC,gBAPXY,aCwDJC,cAlCb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAAa,KAAAI,IACjBC,EAAAlB,OAAAoB,EAAA,EAAApB,CAAAa,KAAAb,OAAAqB,EAAA,EAAArB,CAAAiB,GAAAK,KAAAT,KAAMC,KACDS,MAAQ,CACXnC,MAAM,EACNoC,KAAM,KACNC,IAAK,IALUP,mFASC,IAAAQ,EAAAb,KAElBxC,IAAaa,KAAM,SAAAsC,GACjB9C,QAAQC,IAAK6C,GACbE,EAAKC,SAAS,CAAEH,KAAMA,uCAKxB,IAAIC,EAAMZ,KAAKU,MAAMC,KAAOX,KAAKU,MAAMC,KAAO,GAC9C,OAAGC,EAGCf,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAAA,oBAAYa,EAAII,OAChBnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMjD,OAAQgC,KAAKU,MAAMC,KAAK3C,UAKhC6B,EAAAC,EAAAC,cAAA,+BA9BUI,aCnBZe,UAAcC,SAASC,eAAe,SAC5CC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASL","file":"static/js/main.e351e763.chunk.js","sourcesContent":["import * as XLSX from \"xlsx\";\r\n\r\n/*\r\n *  Get XLSX Workbook from public url of the server\r\n *  Every Sheet in the workbook is a model.We need to  remove \"Historico\" sheet is\r\n *  not a model.\r\n *  @return json\r\n *\r\n */\r\nexport const XlsxToJson = xlsx => {\r\n  return new Promise(function(resolve, reject) {\r\n    console.log(\"called\");\r\n    let response = [];\r\n    let models = [];\r\n    let url = \"cars.xlsx\";\r\n    \r\n    var result = makeRequest(\"GET\", url).then( ( file, I ) =>{\r\n      console.log(\"response request\", file);\r\n      var data = new Uint8Array(file);\r\n      \r\n      var workbook = XLSX.read(data, { type: \"array\" });\r\n      let sheets = workbook.Sheets;\r\n      /**\r\n       *  Iterarion 1 : Iterate every sheet. Each sheet is a car model wich\r\n       *  contain on the first row the header and then the values\r\n       */\r\n      models = Object.keys(sheets).map(key => {\r\n        let model = key;\r\n        let sheet = XLSX.utils.sheet_to_json(sheets[model], { range: 1 });\r\n    \r\n        // TODO: Actual the XLSX has on every last row of every sheet junk data. Remove from code or\r\n        // remove from the XLSX\r\n        sheet.splice(-1, 1);\r\n        return {\r\n          model: model,\r\n          data: sheet\r\n        };\r\n      });\r\n      response = {\r\n        models : Object.keys(sheets),\r\n        data : models\r\n      }\r\n      resolve(response)\r\n      return\r\n    })\r\n    console.log('result', result)\r\n  })\r\n};\r\n\r\nfunction makeRequest(method, url) {\r\n  console.log('Make a request')\r\n  return new Promise( function(resolve, reject) {\r\n    fetch(url).then(function(response) {\r\n      return response.arrayBuffer();\r\n    }).then(function(json) {\r\n        console.log('parsed json', json)\r\n        resolve(json)\r\n    }).catch(function(ex) {\r\n        console.log('parsing failed', ex)\r\n    })\r\n  })\r\n}\r\n","import Form from './Form';\r\nexport default Form;","import React, { Component } from \"react\";\r\n\r\n\r\n\r\nclass Form extends Component {\r\n    render(){\r\n        return(\r\n            <form>\r\n                <select>\r\n                    {\r\n                     this.props.models.map( ( model, key)=>{\r\n                       return <option key={key}  value={key}> {model} </option>\r\n                     })\r\n                    }\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Form","import React, { Component } from \"react\";\r\nimport { XlsxToJson } from \"./Utils\";\r\nimport  Form from \"./Components/Form\";\r\n\r\n/**\r\n *  Manage cars data from xslx file converted to JSON\r\n *  XLSX file wil be located at specific /public folder\r\n *  for UPDATES information it's necesary to change the file inside it.\r\n *  ex: https://uploads.codesandbox.io/uploads/user/df6ff7f5-1e82-4373-8f4a-9930336ba434/Fwi3-ficha-tecnica-equinox.xls\r\n *\r\n *  Project components\r\n *  App\r\n *   FormComponent\r\n *   FormResultsComponent\r\n *\r\n *  States\r\n *    Intial state of aplication will be a json file with all Brands availables\r\n *    to populate the first dropdown menu.\r\n *\r\n *  Utils\r\n *    Utils folder contain scripts to controll the process of parse the information\r\n *    on a schema.\r\n *  Form\r\n *    Schema of form would be  [ model, version, year ]\r\n */\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      json: false,\r\n      cars: null,\r\n      car: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // TODO: Get json from XML (utils)\r\n    XlsxToJson().then( cars => {\r\n      console.log( cars );\r\n      this.setState({ cars: cars })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let car = this.state.cars ? this.state.cars : \"\";\r\n    if(car){\r\n\r\n      return(\r\n        <React.Fragment>\r\n          <h1>GM app {car.brand}</h1>\r\n          <Form models={this.state.cars.models} />\r\n        </React.Fragment>\r\n      )\r\n    }else{\r\n      return (\r\n        <p>Loading ...</p>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import \"core-js\";\r\nimport 'react-app-polyfill/ie11';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./styles.css\";\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}